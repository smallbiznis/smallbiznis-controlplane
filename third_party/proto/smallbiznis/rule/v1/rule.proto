syntax = "proto3";

package smallbiznis.rule.v1;

option go_package = "github.com/smallbiznis/smallbiznisapis/smallbiznis/rule/v1;rulev1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// ====================
// Rule Engine API
// ====================

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "SmallBiznis Rule Engine API"
    version: "v1"
    description: "API untuk evaluasi rule DSL (loyalty, voucher, campaign)"
    contact: {
      name: "SmallBiznis Team"
      url: "https://smallbiznis.io"
    }
  }
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
};

// ====================
// ENUMS
// ====================

enum RuleStatus {
  RULE_STATUS_UNSPECIFIED = 0;
  RULE_STATUS_ENABLED = 1;
  RULE_STATUS_DISABLED = 2;
}

enum RuleActionType {
  RULE_ACTION_TYPE_UNSPECIFIED = 0;
  RULE_ACTION_TYPE_REWARD_POINT = 1;
  RULE_ACTION_TYPE_DISCOUNT = 2;
  RULE_ACTION_TYPE_NOTIFICATION = 3;
  RULE_ACTION_TYPE_TAG_USER = 4;
}

enum EvaluationStatus {
  EVALUATION_STATUS_UNSPECIFIED = 0;
  EVALUATION_STATUS_SUCCESS = 1;
  EVALUATION_STATUS_ERROR = 2;
}

// ====================
// MESSAGE DEFINITIONS
// ====================

// Rule model represents a single logical rule that can be evaluated.
message Rule {
  string rule_id = 1;
  string tenant_id = 2;
  string name = 3;
  string description = 4;
  string expression = 5;  // Example: total_spent > 100000 && user_tier == "gold"
  RuleActionType action_type = 6;
  google.protobuf.Struct action_value = 7; // Example: {"reward_points": 100}
  RuleStatus status = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

// ====================
// EVALUATION REQUESTS
// ====================

// Request to evaluate a single rule.
message EvaluateRuleRequest {
  string tenant_id = 1;
  string rule_id = 2;
  google.protobuf.Struct context = 3; // Example: {"total_spent": 120000, "user_tier": "gold"}
}

// Response after rule evaluation.
message EvaluateRuleResponse {
  bool matched = 1;                     // true if rule condition matches
  google.protobuf.Struct action_value = 2; // The result action (e.g. {"reward_points": 100})
  string error = 3;                     // non-empty if evaluation failed
}

// Request to evaluate multiple rules for a tenant.
message EvaluateRulesRequest {
  string tenant_id = 1;
  repeated Rule rules = 2;
  google.protobuf.Struct context = 3;
}

// Response for multiple rule evaluation.
message EvaluateRulesResponse {
  repeated EvaluateRuleResponse results = 1;
}

// Represent satu hasil evaluasi rule
message RuleEvaluationResult {
  string rule_id = 1;
  bool matched = 2;
  google.protobuf.Struct action_value = 3;
  string error_message = 4;
  EvaluationStatus status = 5;
}

// Represent batch evaluasi request untuk tenant
message BatchEvaluateRequest {
  string tenant_id = 1;
  repeated string rule_ids = 2;                // optional: hanya rule tertentu
  google.protobuf.Struct context = 3;          // contoh: {"user_id": "123", "total_spent": 150000}
  bool include_disabled = 4;                   // jika true, evaluasi rule non-aktif juga (untuk testing)
}

// Represent hasil batch evaluasi
message BatchEvaluateResponse {
  repeated RuleEvaluationResult results = 1;
  int32 total_matched = 2;
  int32 total_rules = 3;
  string execution_id = 4;                     // bisa untuk logging/audit
  string tenant_id = 5;
}

// Request evaluasi streaming (misal untuk campaign massive targeting)
message StreamEvaluateRequest {
  string tenant_id = 1;
  google.protobuf.Struct context = 2;
  repeated string rule_ids = 3;
}

// Response streaming per rule
message StreamEvaluateResponse {
  RuleEvaluationResult result = 1;
}

// ====================
// SERVICE DEFINITION
// ====================

service RuleService {
  // Evaluate a single rule by ID
  rpc EvaluateRule(EvaluateRuleRequest) returns (EvaluateRuleResponse) {
    option (google.api.http) = {
      post: "/v1/rules:evaluate"
      body: "*"
    };
  }

  // Evaluate multiple rules in one call
  rpc EvaluateRules(EvaluateRulesRequest) returns (EvaluateRulesResponse) {
    option (google.api.http) = {
      post: "/v1/rules:batchEvaluate"
      body: "*"
    };
  }

  // CRUD ops (optional for management UI)
  rpc ListRules(ListRulesRequest) returns (ListRulesResponse) {
    option (google.api.http) = {
      get: "/v1/rules"
    };
  }

  rpc GetRule(GetRuleRequest) returns (GetRuleResponse) {
    option (google.api.http) = {
      get: "/v1/rules/{rule_id}"
    };
  }

  rpc CreateRule(CreateRuleRequest) returns (CreateRuleResponse) {
    option (google.api.http) = {
      post: "/v1/rules"
      body: "*"
    };
  }

  rpc UpdateRule(UpdateRuleRequest) returns (UpdateRuleResponse) {
    option (google.api.http) = {
      patch: "/v1/rules/{rule_id}"
      body: "*"
    };
  }

  rpc DeleteRule(DeleteRuleRequest) returns (DeleteRuleResponse) {
    option (google.api.http) = {
      delete: "/v1/rules/{rule_id}"
    };
  }

  rpc BatchEvaluate(BatchEvaluateRequest) returns (BatchEvaluateResponse) {
    option (google.api.http) = {
      post: "/v1/rules:evaluateBatch"
      body: "*"
    };
  }

  // Evaluasi batch rules secara streaming (gRPC streaming)
  rpc StreamEvaluate(stream StreamEvaluateRequest) returns (stream StreamEvaluateResponse);
}

// ====================
// MANAGEMENT MESSAGES
// ====================

message ListRulesRequest {
  string tenant_id = 1;
  int32 limit = 2;
  string cursor = 3;
}

message ListRulesResponse {
  repeated Rule rules = 1;
  string next_cursor = 2;
}

message GetRuleRequest {
  string rule_id = 1;
}

message GetRuleResponse {
  Rule rule = 1;
}

message CreateRuleRequest {
  string tenant_id = 1;
  string name = 2;
  string description = 3;
  string expression = 4;
  RuleActionType action_type = 5;
  google.protobuf.Struct action_value = 6;
}

message CreateRuleResponse {
  Rule rule = 1;
}

message UpdateRuleRequest {
  string rule_id = 1;
  string name = 2;
  string description = 3;
  string expression = 4;
  RuleActionType action_type = 5;
  google.protobuf.Struct action_value = 6;
  RuleStatus status = 7;
}

message UpdateRuleResponse {
  Rule rule = 1;
}

message DeleteRuleRequest {
  string rule_id = 1;
}

message DeleteRuleResponse {
  bool success = 1;
}
