// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: smallbiznis/rule/v1/rule.proto

package rulev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RuleService_EvaluateRule_FullMethodName   = "/smallbiznis.rule.v1.RuleService/EvaluateRule"
	RuleService_EvaluateRules_FullMethodName  = "/smallbiznis.rule.v1.RuleService/EvaluateRules"
	RuleService_ListRules_FullMethodName      = "/smallbiznis.rule.v1.RuleService/ListRules"
	RuleService_GetRule_FullMethodName        = "/smallbiznis.rule.v1.RuleService/GetRule"
	RuleService_CreateRule_FullMethodName     = "/smallbiznis.rule.v1.RuleService/CreateRule"
	RuleService_UpdateRule_FullMethodName     = "/smallbiznis.rule.v1.RuleService/UpdateRule"
	RuleService_DeleteRule_FullMethodName     = "/smallbiznis.rule.v1.RuleService/DeleteRule"
	RuleService_BatchEvaluate_FullMethodName  = "/smallbiznis.rule.v1.RuleService/BatchEvaluate"
	RuleService_StreamEvaluate_FullMethodName = "/smallbiznis.rule.v1.RuleService/StreamEvaluate"
)

// RuleServiceClient is the client API for RuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleServiceClient interface {
	// Evaluate a single rule by ID
	EvaluateRule(ctx context.Context, in *EvaluateRuleRequest, opts ...grpc.CallOption) (*EvaluateRuleResponse, error)
	// Evaluate multiple rules in one call
	EvaluateRules(ctx context.Context, in *EvaluateRulesRequest, opts ...grpc.CallOption) (*EvaluateRulesResponse, error)
	// CRUD ops (optional for management UI)
	ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error)
	GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*GetRuleResponse, error)
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error)
	UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error)
	DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error)
	BatchEvaluate(ctx context.Context, in *BatchEvaluateRequest, opts ...grpc.CallOption) (*BatchEvaluateResponse, error)
	// Evaluasi batch rules secara streaming (gRPC streaming)
	StreamEvaluate(ctx context.Context, opts ...grpc.CallOption) (RuleService_StreamEvaluateClient, error)
}

type ruleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleServiceClient(cc grpc.ClientConnInterface) RuleServiceClient {
	return &ruleServiceClient{cc}
}

func (c *ruleServiceClient) EvaluateRule(ctx context.Context, in *EvaluateRuleRequest, opts ...grpc.CallOption) (*EvaluateRuleResponse, error) {
	out := new(EvaluateRuleResponse)
	err := c.cc.Invoke(ctx, RuleService_EvaluateRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) EvaluateRules(ctx context.Context, in *EvaluateRulesRequest, opts ...grpc.CallOption) (*EvaluateRulesResponse, error) {
	out := new(EvaluateRulesResponse)
	err := c.cc.Invoke(ctx, RuleService_EvaluateRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error) {
	out := new(ListRulesResponse)
	err := c.cc.Invoke(ctx, RuleService_ListRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*GetRuleResponse, error) {
	out := new(GetRuleResponse)
	err := c.cc.Invoke(ctx, RuleService_GetRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error) {
	out := new(CreateRuleResponse)
	err := c.cc.Invoke(ctx, RuleService_CreateRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error) {
	out := new(UpdateRuleResponse)
	err := c.cc.Invoke(ctx, RuleService_UpdateRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error) {
	out := new(DeleteRuleResponse)
	err := c.cc.Invoke(ctx, RuleService_DeleteRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) BatchEvaluate(ctx context.Context, in *BatchEvaluateRequest, opts ...grpc.CallOption) (*BatchEvaluateResponse, error) {
	out := new(BatchEvaluateResponse)
	err := c.cc.Invoke(ctx, RuleService_BatchEvaluate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) StreamEvaluate(ctx context.Context, opts ...grpc.CallOption) (RuleService_StreamEvaluateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuleService_ServiceDesc.Streams[0], RuleService_StreamEvaluate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ruleServiceStreamEvaluateClient{stream}
	return x, nil
}

type RuleService_StreamEvaluateClient interface {
	Send(*StreamEvaluateRequest) error
	Recv() (*StreamEvaluateResponse, error)
	grpc.ClientStream
}

type ruleServiceStreamEvaluateClient struct {
	grpc.ClientStream
}

func (x *ruleServiceStreamEvaluateClient) Send(m *StreamEvaluateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ruleServiceStreamEvaluateClient) Recv() (*StreamEvaluateResponse, error) {
	m := new(StreamEvaluateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RuleServiceServer is the server API for RuleService service.
// All implementations must embed UnimplementedRuleServiceServer
// for forward compatibility
type RuleServiceServer interface {
	// Evaluate a single rule by ID
	EvaluateRule(context.Context, *EvaluateRuleRequest) (*EvaluateRuleResponse, error)
	// Evaluate multiple rules in one call
	EvaluateRules(context.Context, *EvaluateRulesRequest) (*EvaluateRulesResponse, error)
	// CRUD ops (optional for management UI)
	ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error)
	GetRule(context.Context, *GetRuleRequest) (*GetRuleResponse, error)
	CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error)
	UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error)
	DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error)
	BatchEvaluate(context.Context, *BatchEvaluateRequest) (*BatchEvaluateResponse, error)
	// Evaluasi batch rules secara streaming (gRPC streaming)
	StreamEvaluate(RuleService_StreamEvaluateServer) error
	mustEmbedUnimplementedRuleServiceServer()
}

// UnimplementedRuleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRuleServiceServer struct {
}

func (UnimplementedRuleServiceServer) EvaluateRule(context.Context, *EvaluateRuleRequest) (*EvaluateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateRule not implemented")
}
func (UnimplementedRuleServiceServer) EvaluateRules(context.Context, *EvaluateRulesRequest) (*EvaluateRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateRules not implemented")
}
func (UnimplementedRuleServiceServer) ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}
func (UnimplementedRuleServiceServer) GetRule(context.Context, *GetRuleRequest) (*GetRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (UnimplementedRuleServiceServer) CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedRuleServiceServer) UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedRuleServiceServer) DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (UnimplementedRuleServiceServer) BatchEvaluate(context.Context, *BatchEvaluateRequest) (*BatchEvaluateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchEvaluate not implemented")
}
func (UnimplementedRuleServiceServer) StreamEvaluate(RuleService_StreamEvaluateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvaluate not implemented")
}
func (UnimplementedRuleServiceServer) mustEmbedUnimplementedRuleServiceServer() {}

// UnsafeRuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleServiceServer will
// result in compilation errors.
type UnsafeRuleServiceServer interface {
	mustEmbedUnimplementedRuleServiceServer()
}

func RegisterRuleServiceServer(s grpc.ServiceRegistrar, srv RuleServiceServer) {
	s.RegisterService(&RuleService_ServiceDesc, srv)
}

func _RuleService_EvaluateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).EvaluateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_EvaluateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).EvaluateRule(ctx, req.(*EvaluateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_EvaluateRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).EvaluateRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_EvaluateRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).EvaluateRules(ctx, req.(*EvaluateRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_ListRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).ListRules(ctx, req.(*ListRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_GetRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).GetRule(ctx, req.(*GetRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_CreateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).CreateRule(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_UpdateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).UpdateRule(ctx, req.(*UpdateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_DeleteRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).DeleteRule(ctx, req.(*DeleteRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_BatchEvaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchEvaluateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).BatchEvaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_BatchEvaluate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).BatchEvaluate(ctx, req.(*BatchEvaluateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_StreamEvaluate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RuleServiceServer).StreamEvaluate(&ruleServiceStreamEvaluateServer{stream})
}

type RuleService_StreamEvaluateServer interface {
	Send(*StreamEvaluateResponse) error
	Recv() (*StreamEvaluateRequest, error)
	grpc.ServerStream
}

type ruleServiceStreamEvaluateServer struct {
	grpc.ServerStream
}

func (x *ruleServiceStreamEvaluateServer) Send(m *StreamEvaluateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ruleServiceStreamEvaluateServer) Recv() (*StreamEvaluateRequest, error) {
	m := new(StreamEvaluateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RuleService_ServiceDesc is the grpc.ServiceDesc for RuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smallbiznis.rule.v1.RuleService",
	HandlerType: (*RuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EvaluateRule",
			Handler:    _RuleService_EvaluateRule_Handler,
		},
		{
			MethodName: "EvaluateRules",
			Handler:    _RuleService_EvaluateRules_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _RuleService_ListRules_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _RuleService_GetRule_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _RuleService_CreateRule_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _RuleService_UpdateRule_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _RuleService_DeleteRule_Handler,
		},
		{
			MethodName: "BatchEvaluate",
			Handler:    _RuleService_BatchEvaluate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvaluate",
			Handler:       _RuleService_StreamEvaluate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "smallbiznis/rule/v1/rule.proto",
}
